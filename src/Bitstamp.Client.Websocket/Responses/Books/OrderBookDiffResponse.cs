// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Websocket.Client.Sample.Models;
//
//    var orderBook = OrderBook.FromJson(jsonString);

using System;
using System.Reactive.Subjects;
using Bitstamp.Client.Websocket.Json;
using Bitstamp.Client.Websocket.Messages;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Bitstamp.Client.Websocket.Responses.Books
{
    public class OrderBookDiffResponse : ResponseBase
    {
        public override MessageType Event => MessageType.OrderBookDiff;
        public OrderBookDiff Data { get; set; }

        internal static bool TryHandle(JObject response, ISubject<OrderBookDiffResponse> subject)
        {
            if (response != null && (bool) !response?["channel"].Value<string>().StartsWith("diff_order_book"))
                return false;

            var parsed = response?.ToObject<OrderBookDiffResponse>(BitstampJsonSerializer.Serializer);

            if (parsed != null)
            {
                var index = 3;
                var channel = response?["channel"].Value<string>();
                parsed.Symbol = response?["channel"].Value<string>().Split('_')[index];
                subject.OnNext(parsed);
            }

            return true;
        }
    }

    /*
    internal class OrderBookFullTimeConverter : JsonConverter
    {
        public static readonly OrderBookFullTimeConverter Singleton = new OrderBookFullTimeConverter();

        public override bool CanConvert(Type t)
        {
            return t == typeof(long) || t == typeof(long?);
        }

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (long.TryParse(value, out l)) return l;
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (long) untypedValue;
            serializer.Serialize(writer, value.ToString());
        }
    }*/
}