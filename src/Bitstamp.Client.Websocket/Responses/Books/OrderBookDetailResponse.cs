// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Websocket.Client.Sample.Models;
//
//    var orderBook = OrderBook.FromJson(jsonString);

using System;
using System.Reactive.Subjects;
using Bitstamp.Client.Websocket.Communicator;
using Bitstamp.Client.Websocket.Json;
using Bitstamp.Client.Websocket.Messages;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Websocket.Client;

namespace Bitstamp.Client.Websocket.Responses.Books
{
    /// <summary>
    /// Order Book Detail
    /// Orders with order ID
    public class OrderBookDetailResponse : ResponseBase
    {
        public override MessageType Event => MessageType.OrderBookDetail;
        public OrderBookDetail Data { get; set; }

        internal static bool TryHandle(JObject response, ISubject<OrderBookDetailResponse> subject)
        {
            if (response != null && (bool) !response?["channel"].Value<string>().StartsWith("detail_order_book") &&
                response?["event"].Value<string>() != "bts:unsubscription_succeeded") return false;

            var parsed = response?.ToObject<OrderBookDetailResponse>(BitstampJsonSerializer.Serializer);

            if (parsed != null)
            {
                var index = 3;
                var channel = response?["channel"].Value<string>();

                parsed.Symbol = response?["channel"].Value<string>().Split('_')[index];
                subject.OnNext(parsed);
            }

            return true;
        }

        /// <summary>
        /// Stream snapshot manually via communicator
        /// </summary>
        public static void StreamFakeSnapshot(OrderBookSnapshotResponse snapshot, IBitstampCommunicator communicator)
        {
            var symbolSafe = (snapshot?.Symbol ?? string.Empty).ToLower().Replace("-", "").Replace("_", "");
            var response = snapshot;
            if (response != null)
            {
                response.Symbol = $"{symbolSafe}";

                var serialized = JsonConvert.SerializeObject(response, BitstampJsonSerializer.Settings);
                communicator.StreamFakeMessage(ResponseMessage.TextMessage(serialized));
            }
        }
    }
}