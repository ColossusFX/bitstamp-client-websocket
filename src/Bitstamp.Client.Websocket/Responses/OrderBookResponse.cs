// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Websocket.Client.Sample.Models;
//
//    var orderBook = Book.FromJson(jsonString);

using System;
using System.Reactive.Subjects;
using Bitstamp.Client.Websocket.Json;
using Bitstamp.Client.Websocket.Responses.Books;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Bitstamp.Client.Websocket.Responses
{
    public class OrderBookResponse : ResponseBase<OrderBookResponse>
    {
        //public override Event Event => Event.Data;
        //public override Channel Channel => Channel.Book;

        [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(OrderBookParseTimeConverter))]
        public long? Timestamp { get; set; }

        [JsonProperty("microtimestamp", NullValueHandling = NullValueHandling.Ignore)]
        public string Microtimestamp { get; set; }

        /// <summary>
        /// Order book bid levels
        /// </summary>
        [JsonConverter(typeof(OrderBookLevelConverter), OrderBookSide.Buy)]
        public OrderBookLevel[] Bids { get; set; }

        /// <summary>
        /// Order book ask levels
        /// </summary>
        [JsonConverter(typeof(OrderBookLevelConverter), OrderBookSide.Sell)]
        public OrderBookLevel[] Asks { get; set; }

        internal static bool TryHandle(JObject response, ISubject<OrderBookResponse> subject)
        {
            if (response != null && (bool) !response?["channel"].Value<string>().StartsWith("order_book")) return false;

            var parsed = response?.ToObject<OrderBookResponse>(BitstampJsonSerializer.Serializer);

            if (parsed != null)
            {
                var index = 2;
                var channel = response?["channel"].Value<string>();

                parsed.Symbol = response?["channel"].Value<string>().Split('_')[index];
                parsed.Data.Symbol = parsed.Symbol;
                parsed.Data.Channel = parsed.Channel;
                parsed.Data.Event = parsed.Event;

                subject.OnNext(parsed.Data);
            }

            return true;
        }
    }

    internal class OrderBookParseTimeConverter : JsonConverter
    {
        public static readonly OrderBookParseTimeConverter Singleton = new OrderBookParseTimeConverter();

        public override bool CanConvert(Type t)
        {
            return t == typeof(long) || t == typeof(long?);
        }

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (long.TryParse(value, out l)) return l;
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (long) untypedValue;
            serializer.Serialize(writer, value.ToString());
        }
    }
}